install.packages("caret")
install.packages("caret")
malaria_url <- "https://raw.githubusercontent.com/HughSt/HughSt.github.io/master/course_materials/week1/Lab_files/Data/mal_data_eth_2009_no_dups.csv"
ETH_malaria_data <- malaria_url %>% read.csv(header=T)
library(tidyverse)
# Get Biolclim layers for Ethiopia
bioclim_layers <- raster::getData('worldclim', var='bio', res=0.5, lon=38.7578, lat=8.9806) # lng/lat for Addis Ababa
# crop layers to make them easier to handle
ETH_Adm_1 <- raster::getData("GADM", country="ETH", level=1) # Admin boundaries
Oromia <- subset(ETH_Adm_1, NAME_1=="Oromia")
bioclim_layers_oromia <- crop(bioclim_layers, Oromia)
# extract to variable
ETH_malaria_data <- ETH_malaria_data %>%
mutate(bioclim1 <- extract(bioclim_layers_oromia[[1]], ETH_malaria_data %>% select(longitude, latitude)),
bioclim2 <- extract(bioclim_layers_oromia[[2]], ETH_malaria_data %>% select(longitude, latitude)))
malaria_url <- "https://raw.githubusercontent.com/HughSt/HughSt.github.io/master/course_materials/week1/Lab_files/Data/mal_data_eth_2009_no_dups.csv"
ETH_malaria_data <- malaria_url %>% read.csv(header=T)
# Get Biolclim layers for Ethiopia
bioclim_layers <- raster::getData('worldclim', var='bio', res=0.5, lon=38.7578, lat=8.9806) # lng/lat for Addis Ababa
# crop layers to make them easier to handle
ETH_Adm_1 <- raster::getData("GADM", country="ETH", level=1) # Admin boundaries
Oromia <- ETH_Adm_1 %>% subset(NAME_1 %in% "Oromia")
bioclim_layers_oromia <- bioclim_layers %>% crop(Oromia)
bioclim_layers_oromia <- bioclim_layers %>% raster::crop(Oromia)
# split data into folds ----
folds_list <- caret::createFolds(ETH_malaria_data$pf_pr) # By default creates 10 folds
# folds_list <- createFolds(ETH_malaria_data, k = 20) # 20 fold
folds_list[[1]]
cross_validated_prediction <- NULL
observed <- NULL
# Now loop through each fold, fitting the model to each training dataset of each fold, and predict to the validation data
for(fold in 1:length(folds_list)){
training_data <- ETH_malaria_data[-folds_list[[fold]], ]
validation_data <- ETH_malaria_data[folds_list[[fold]], ]
# Fit model
fold_mod_spatial <- spaMM::fitme(cbind(pf_pos, examined - pf_pos) ~ bioclim2 + Matern(1|latitude+longitude), data=training_data, family=binomial())
# Predict
x_valid_pred <- fold_mod_spatial %>% predict(validation_data)
# Add to cross_validated_prediction
cross_validated_prediction <- c(cross_validated_prediction,  x_valid_pred)
observed <- c(observed, validation_data$pf_pr)
}
# extract bioclim data as variables in dataset
ETH_malaria_data <- ETH_malaria_data %>%
mutate(bioclim1 <- extract(bioclim_layers_oromia[[1]], ETH_malaria_data %>% select(longitude, latitude)),
bioclim2 <- extract(bioclim_layers_oromia[[2]], ETH_malaria_data %>% select(longitude, latitude)))
# split data into folds ----
folds_list <- caret::createFolds(ETH_malaria_data$pf_pr) # By default creates 10 folds
# folds_list <- createFolds(ETH_malaria_data, k = 20) # 20 fold
folds_list[[1]]
# loop through folds ----
# before we loop through folds, lets create empty objects of things we want to keep
cross_validated_prediction <- NULL
observed <- NULL
# Now loop through each fold, fitting the model to each training dataset of each fold, and predict to the validation data
for(fold in 1:length(folds_list)){
training_data <- ETH_malaria_data[-folds_list[[fold]], ]
validation_data <- ETH_malaria_data[folds_list[[fold]], ]
# Fit model
fold_mod_spatial <- spaMM::fitme(cbind(pf_pos, examined - pf_pos) ~ bioclim2 + Matern(1|latitude+longitude), data=training_data, family=binomial())
# Predict
x_valid_pred <- fold_mod_spatial %>% predict(validation_data)
# Add to cross_validated_prediction
cross_validated_prediction <- c(cross_validated_prediction,  x_valid_pred)
observed <- c(observed, validation_data$pf_pr)
}
# crop layers to make them easier to handle
ETH_Adm_1 <- raster::getData("GADM", country="ETH", level=1) # Admin boundaries
Oromia <- ETH_Adm_1 %>% subset(NAME_1 %in% "Oromia")
bioclim_layers_oromia <- bioclim_layers %>% raster::crop(Oromia)
View(ETH_malaria_data)
# extract bioclim data as variables in dataset
ETH_malaria_data <- ETH_malaria_data %>%
mutate(bioclim1 <- extract(bioclim_layers_oromia[[1]], ETH_malaria_data %>% select(longitude, latitude)),
bioclim2 <- extract(bioclim_layers_oromia[[2]], ETH_malaria_data %>% select(longitude, latitude)))
# extract bioclim data as variables in dataset
ETH_malaria_data <- ETH_malaria_data %>%
mutate(bioclim1 <- raster::extract(bioclim_layers_oromia[[1]], ETH_malaria_data %>% select(longitude, latitude)),
bioclim2 <- raster::extract(bioclim_layers_oromia[[2]], ETH_malaria_data %>% select(longitude, latitude)))
View(ETH_malaria_data)
bioclim_layers_oromia
bioclim_layers_oromia[[1]]
ETH_malaria_data$bioclim1 <- extract(bioclim_layers_oromia[[1]], ETH_malaria_data[,c("longitude", "latitude")])
ETH_malaria_data$bioclim1 <- raster::extract(bioclim_layers_oromia[[1]], ETH_malaria_data[,c("longitude", "latitude")])
View(ETH_malaria_data)
# load libraries ----
library(raster)
library(spaMM)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(tidyverse)
# Get Ethiopia malaria data
malaria_url <- "https://raw.githubusercontent.com/HughSt/HughSt.github.io/master/course_materials/week1/Lab_files/Data/mal_data_eth_2009_no_dups.csv"
ETH_malaria_data <- malaria_url %>% read.csv(header=T)
# Get Biolclim layers for Ethiopia
bioclim_layers <- raster::getData('worldclim', var='bio', res=0.5, lon=38.7578, lat=8.9806) # lng/lat for Addis Ababa
# crop layers to make them easier to handle
ETH_Adm_1 <- raster::getData("GADM", country="ETH", level=1) # Admin boundaries
Oromia <- ETH_Adm_1 %>% subset(NAME_1 %in% "Oromia")
bioclim_layers_oromia <- bioclim_layers %>% raster::crop(Oromia)
ETH_malaria_data[,c("longitude", "latitude")]
ETH_malaria_data[,c("longitude", "latitude")]
# load libraries ----
library(raster)
library(spaMM)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(tidyverse)
# Get Ethiopia malaria data
malaria_url <- "https://raw.githubusercontent.com/HughSt/HughSt.github.io/master/course_materials/week1/Lab_files/Data/mal_data_eth_2009_no_dups.csv"
ETH_malaria_data <- malaria_url %>% read.csv(header=T)
# Get Biolclim layers for Ethiopia
bioclim_layers <- raster::getData('worldclim', var='bio', res=0.5, lon=38.7578, lat=8.9806) # lng/lat for Addis Ababa
# crop layers to make them easier to handle
ETH_Adm_1 <- raster::getData("GADM", country="ETH", level=1) # Admin boundaries
Oromia <- ETH_Adm_1 %>% subset(NAME_1 %in% "Oromia")
bioclim_layers_oromia <- bioclim_layers %>% raster::crop(Oromia)
ETH_malaria_data <- ETH_malaria_data %>%
mutate(bioclim1 = raster::extract(bioclim_layers_oromia[[1]], ETH_malaria_data %>% select(longitude, latitude)))
ETH_malaria_data %>% select(longitude, latitude)
ETH_malaria_data[,c("longitude", "latitude")]
ETH_malaria_data[,c("longitude", "latitude")] %>% class()
ETH_malaria_data %>% select(longitude, latitude)
# load libraries ----
library(raster)
library(spaMM)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(tidyverse)
# Get Ethiopia malaria data
malaria_url <- "https://raw.githubusercontent.com/HughSt/HughSt.github.io/master/course_materials/week1/Lab_files/Data/mal_data_eth_2009_no_dups.csv"
ETH_malaria_data <- malaria_url %>% read.csv(header=T)
# Get Biolclim layers for Ethiopia
bioclim_layers <- raster::getData('worldclim', var='bio', res=0.5, lon=38.7578, lat=8.9806) # lng/lat for Addis Ababa
# crop layers to make them easier to handle
ETH_Adm_1 <- raster::getData("GADM", country="ETH", level=1) # Admin boundaries
Oromia <- ETH_Adm_1 %>% subset(NAME_1 %in% "Oromia")
bioclim_layers_oromia <- bioclim_layers %>% raster::crop(Oromia)
ETH_malaria_data %>% select(longitude, latitude)
ETH_malaria_data <- ETH_malaria_data %>%
mutate(bioclim1 <- raster::extract(bioclim_layers_oromia[[1]], ETH_malaria_data %>% select(longitude, latitude)))
ETH_malaria_data <- ETH_malaria_data %>%
mutate(bioclim1 <- raster::extract(bioclim_layers_oromia[[1]], ETH_malaria_data[,c("longitude", "latitude")]))
# load libraries ----
library(raster)
library(spaMM)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(tidyverse)
# Get Ethiopia malaria data
malaria_url <- "https://raw.githubusercontent.com/HughSt/HughSt.github.io/master/course_materials/week1/Lab_files/Data/mal_data_eth_2009_no_dups.csv"
ETH_malaria_data <- malaria_url %>% read.csv(header=T)
# Get Biolclim layers for Ethiopia
bioclim_layers <- raster::getData('worldclim', var='bio', res=0.5, lon=38.7578, lat=8.9806) # lng/lat for Addis Ababa
# crop layers to make them easier to handle
ETH_Adm_1 <- raster::getData("GADM", country="ETH", level=1) # Admin boundaries
Oromia <- ETH_Adm_1 %>% subset(NAME_1 %in% "Oromia")
bioclim_layers_oromia <- bioclim_layers %>% raster::crop(Oromia)
# extract bioclim data as variables in dataset
ETH_malaria_data <- ETH_malaria_data %>%
mutate(bioclim1 <- raster::extract(bioclim_layers_oromia[[1]], ETH_malaria_data[,c("longitude", "latitude")]),
bioclim2 <- raster::extract(bioclim_layers_oromia[[2]], ETH_malaria_data[,c("longitude", "latitude")]))
# split data into folds ----
folds_list <- caret::createFolds(ETH_malaria_data$pf_pr) # By default creates 10 folds
# folds_list <- createFolds(ETH_malaria_data, k = 20) # 20 fold
folds_list[[1]]
# loop through folds ----
# before we loop through folds, lets create empty objects of things we want to keep
cross_validated_prediction <- NULL
observed <- NULL
# Now loop through each fold, fitting the model to each training dataset of each fold, and predict to the validation data
for(fold in 1:length(folds_list)){
training_data <- ETH_malaria_data[-folds_list[[fold]], ]
validation_data <- ETH_malaria_data[folds_list[[fold]], ]
# Fit model
fold_mod_spatial <- spaMM::fitme(cbind(pf_pos, examined - pf_pos) ~ bioclim2 + Matern(1|latitude+longitude), data=training_data, family=binomial())
# Predict
x_valid_pred <- fold_mod_spatial %>% predict(validation_data)
# Add to cross_validated_prediction
cross_validated_prediction <- c(cross_validated_prediction,  x_valid_pred)
observed <- c(observed, validation_data$pf_pr)
}
ETH_malaria_data[-folds_list[[fold]], ]
ETH_malaria_data[-folds_list[[fold]], ]
ETH_malaria_data[-folds_list[[fold]], ]
# Now loop through each fold, fitting the model to each training dataset of each fold, and predict to the validation data
for(fold in 1:length(folds_list)){
training_data <- ETH_malaria_data[-folds_list[[fold]], ]
validation_data <- ETH_malaria_data[folds_list[[fold]], ]
}
# Now loop through each fold, fitting the model to each training dataset of each fold, and predict to the validation data
for(fold in 1:length(folds_list)){
training_data <- ETH_malaria_data[-folds_list[[fold]], ]
validation_data <- ETH_malaria_data[folds_list[[fold]], ]
# Fit model
fold_mod_spatial <- spaMM::fitme(cbind(pf_pos, examined - pf_pos) ~ bioclim2 + Matern(1|latitude+longitude),
data=training_data, family=binomial())
}
training_data
View(training_data)
View(ETH_malaria_data)
# extract bioclim data as variables in dataset
ETH_malaria_data <- ETH_malaria_data %>%
mutate(bioclim1 <- raster::extract(bioclim_layers_oromia[[1]], ETH_malaria_data[,c("longitude", "latitude")]),
bioclim2 <- raster::extract(bioclim_layers_oromia[[2]], ETH_malaria_data[,c("longitude", "latitude")]))
View(ETH_malaria_data)
# extract bioclim data as variables in dataset
ETH_malaria_data <- ETH_malaria_data %>%
mutate(bioclim1 = raster::extract(bioclim_layers_oromia[[1]], ETH_malaria_data[,c("longitude", "latitude")]),
bioclim2 = raster::extract(bioclim_layers_oromia[[2]], ETH_malaria_data[,c("longitude", "latitude")]))
View(ETH_malaria_data)
# load libraries ----
library(raster)
library(spaMM)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(tidyverse)
# Get Ethiopia malaria data
malaria_url <- "https://raw.githubusercontent.com/HughSt/HughSt.github.io/master/course_materials/week1/Lab_files/Data/mal_data_eth_2009_no_dups.csv"
ETH_malaria_data <- malaria_url %>% read.csv(header=T)
# Get Biolclim layers for Ethiopia
bioclim_layers <- raster::getData('worldclim', var='bio', res=0.5, lon=38.7578, lat=8.9806) # lng/lat for Addis Ababa
# crop layers to make them easier to handle
ETH_Adm_1 <- raster::getData("GADM", country="ETH", level=1) # Admin boundaries
Oromia <- ETH_Adm_1 %>% subset(NAME_1 %in% "Oromia")
bioclim_layers_oromia <- bioclim_layers %>% raster::crop(Oromia)
# extract bioclim data as variables in dataset
ETH_malaria_data <- ETH_malaria_data %>%
mutate(bioclim1 = raster::extract(bioclim_layers_oromia[[1]], ETH_malaria_data[,c("longitude", "latitude")]),
bioclim2 = raster::extract(bioclim_layers_oromia[[2]], ETH_malaria_data[,c("longitude", "latitude")]))
View(ETH_malaria_data)
# split data into folds ----
folds_list <- caret::createFolds(ETH_malaria_data$pf_pr) # By default creates 10 folds
# folds_list <- createFolds(ETH_malaria_data, k = 20) # 20 fold
folds_list[[1]]
# loop through folds ----
# before we loop through folds, lets create empty objects of things we want to keep
cross_validated_prediction <- NULL
observed <- NULL
# Now loop through each fold, fitting the model to each training dataset of each fold, and predict to the validation data
for(fold in 1:length(folds_list)){
training_data <- ETH_malaria_data[-folds_list[[fold]], ]
validation_data <- ETH_malaria_data[folds_list[[fold]], ]
}
# load libraries ----
library(raster)
library(spaMM)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(tidyverse)
# Get Ethiopia malaria data
malaria_url <- "https://raw.githubusercontent.com/HughSt/HughSt.github.io/master/course_materials/week1/Lab_files/Data/mal_data_eth_2009_no_dups.csv"
ETH_malaria_data <- malaria_url %>% read.csv(header=T)
# Get Biolclim layers for Ethiopia
bioclim_layers <- raster::getData('worldclim', var='bio', res=0.5, lon=38.7578, lat=8.9806) # lng/lat for Addis Ababa
# crop layers to make them easier to handle
ETH_Adm_1 <- raster::getData("GADM", country="ETH", level=1) # Admin boundaries
Oromia <- ETH_Adm_1 %>% subset(NAME_1 %in% "Oromia")
bioclim_layers_oromia <- bioclim_layers %>% raster::crop(Oromia)
# extract bioclim data as variables in dataset
ETH_malaria_data <- ETH_malaria_data %>%
mutate(bioclim1 = raster::extract(bioclim_layers_oromia[[1]], ETH_malaria_data[,c("longitude", "latitude")]),
bioclim2 = raster::extract(bioclim_layers_oromia[[2]], ETH_malaria_data[,c("longitude", "latitude")]))
# split data into folds ----
folds_list <- caret::createFolds(ETH_malaria_data$pf_pr) # By default creates 10 folds
# folds_list <- createFolds(ETH_malaria_data, k = 20) # 20 fold
folds_list[[1]]
# loop through folds ----
# before we loop through folds, lets create empty objects of things we want to keep
cross_validated_prediction <- NULL
observed <- NULL
# Now loop through each fold, fitting the model to each training dataset of each fold, and predict to the validation data
for(fold in 1:length(folds_list)){
training_data <- ETH_malaria_data[-folds_list[[fold]], ]
validation_data <- ETH_malaria_data[folds_list[[fold]], ]
# Fit model
fold_mod_spatial <- spaMM::fitme(cbind(pf_pos, examined - pf_pos) ~ bioclim2 + Matern(1|latitude+longitude),
data=training_data, family=binomial())
# Predict
x_valid_pred <- fold_mod_spatial %>% predict(validation_data)
# Add to cross_validated_prediction
cross_validated_prediction <- c(cross_validated_prediction, x_valid_pred)
observed <- c(observed, validation_data$pf_pr)
}
# load libraries ----
library(raster)
library(spaMM)
library(caret)
library(ggplot2)
library(ModelMetrics)
library(tidyverse)
# Get Ethiopia malaria data
malaria_url <- "https://raw.githubusercontent.com/HughSt/HughSt.github.io/master/course_materials/week1/Lab_files/Data/mal_data_eth_2009_no_dups.csv"
ETH_malaria_data <- malaria_url %>% read.csv(header=T)
# Get Biolclim layers for Ethiopia
bioclim_layers <- raster::getData('worldclim', var='bio', res=0.5, lon=38.7578, lat=8.9806) # lng/lat for Addis Ababa
# crop layers to make them easier to handle
ETH_Adm_1 <- raster::getData("GADM", country="ETH", level=1) # Admin boundaries
Oromia <- ETH_Adm_1 %>% subset(NAME_1 %in% "Oromia")
bioclim_layers_oromia <- bioclim_layers %>% raster::crop(Oromia)
# extract bioclim data as variables in dataset
ETH_malaria_data <- ETH_malaria_data %>%
mutate(bioclim1 = raster::extract(bioclim_layers_oromia[[1]], ETH_malaria_data[,c("longitude", "latitude")]),
bioclim2 = raster::extract(bioclim_layers_oromia[[2]], ETH_malaria_data[,c("longitude", "latitude")]))
# split data into folds ----
folds_list <- caret::createFolds(ETH_malaria_data$pf_pr) # By default creates 10 folds
# folds_list <- createFolds(ETH_malaria_data, k = 20) # 20 fold
folds_list[[1]]
# loop through folds ----
# before we loop through folds, lets create empty objects of things we want to keep
cross_validated_prediction <- NULL
observed <- NULL
# Now loop through each fold, fitting the model to each training dataset of each fold, and predict to the validation data
for(fold in 1:length(folds_list)){
training_data <- ETH_malaria_data[-folds_list[[fold]], ]
validation_data <- ETH_malaria_data[folds_list[[fold]], ]
# Fit model on training data
fold_mod_spatial <- spaMM::fitme(cbind(pf_pos, examined - pf_pos) ~
bioclim2 + Matern(1|latitude+longitude),
data=training_data, family=binomial())
# Predict
x_valid_pred <- fold_mod_spatial %>% predict(validation_data)
# Add to cross_validated_prediction
cross_validated_prediction <- c(cross_validated_prediction, x_valid_pred)
observed <- c(observed, validation_data$pf_pr)
}
